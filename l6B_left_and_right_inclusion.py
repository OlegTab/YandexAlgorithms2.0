'''
B. Номер левого и правого вхождения
Ограничение времени	2 секунды
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Требуется определить в заданном массиве номер самого левого и самого
правого элемента, равного искомому числу.

Формат ввода
В первой строке вводится одно натуральное число N, не превосходящее 10^5: количество чисел в массиве.
Во второй строке вводятся N натуральных чисел, не превосходящих 10^9, каждое следующее не меньше предыдущего.
В третьей строке вводится количество искомых чисел M – натуральное число, не превосходящее 10^6.
В четвертой строке вводится M натуральных чисел, не превосходящих 10^9.

Формат вывода
Для каждого запроса выведите в отдельной строке через пробел два числа:
номер элемента самого левого и самого правого элементов массива, равных числу-запросу.
Элементы массива нумеруются с единицы.Если в массиве нет такого числа,
выведите в соответствующей строке два нуля, разделенных пробелом.

Пример 1
Ввод	Вывод
4
1 2 2 3
4
4 3 2 1

Вывод
0 0
4 4
2 3
1 1
Пример 2
Ввод
10
1 2 3 4 5 6 7 7 8 9
10
7 3 3 1 3 7 9 7 7 10
Вывод
7 8
3 3
3 3
1 1
3 3
7 8
10 10
7 8
7 8
0 0
'''

def lbinsearch(l, r, params):
    a, x = params
    while (l < r):
        m = (l + r) // 2
        if a[m] >= x:
            r = m
        else:
            l = m + 1
    if a[l] == x:
        return l + 1
    else:
        return 0
def rbinsearch(l, r, params):
    a, x = params
    while (l < r):
        m = (l + r + 1) // 2
        if a[m] <= x:
            l = m
        else:
            r = m - 1
    if a[r] == x:
        return r + 1
    else:
        return 0
n = int(input())
a = list(map(int, input().split()))
m = int(input())
b = list(map(int, input().split()))
for i in b:
    left = lbinsearch(0, len(a) - 1, (a, i))
    right = rbinsearch(0, len(a) - 1, (a, i))
    print(left, right)
